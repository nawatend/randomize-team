{"version":3,"sources":["components/PlayersInput.jsx","layouts/TopBar.jsx","components/Team.jsx","utils/shuffle.js","App.jsx","serviceWorker.js","index.js","logo.svg"],"names":["SideBar","props","className","Heading","size","is","TagInput","inputProps","placeholder","width","values","players","onChange","marginButton","Select","marginBottom","onChangeTotalTeam","defaultValue","value","Button","onClick","appearance","intent","marginRight","iconBefore","TopBar","Team","Table","Head","TextHeaderCell","text","teamName","Body","height","map","name","id","Row","key","isSelectable","onSelect","alert","TextCell","shuffle","array","t","i","m","length","Math","floor","random","App","useState","setPlayers","teamMembers","setTeamMembers","teams","totalTeams","setTotalTeams","e","allPlayers","oneTeam","step","round","parseInt","n","push","randomizeTeam","target","Array","from","team","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.04b980ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Select, Button, TagInput, Heading } from 'evergreen-ui'\nexport default function SideBar(props) {\n\n\n  return (\n    <div className=\"side__bar\">\n      <Heading size={600} is=\"h1\">Players name</Heading>\n      <TagInput\n        className=\"tag__input\"\n        inputProps={{ placeholder: 'Add Player Name...' }}\n        width=\"100%\"\n        values={props.players}\n        onChange={props.onChange}\n      />\n\n      <Heading size={400} is=\"h1\" marginButton=\"default\">Total Teams</Heading>\n      <Select width=\"100%\" marginBottom={20} onChange={props.onChangeTotalTeam}>\n        <option defaultValue=\"2\" >2 Teams</option>\n        <option value=\"3\" >3 Teams</option>\n        <option value=\"4\">4 Teams</option>\n        <option value=\"5\">5 Teams</option>\n        <option value=\"6\">6 Teams</option>\n      </Select>\n\n      <Button onClick={props.onClick} appearance=\"primary\" intent=\"success\"\n        marginRight={16} iconBefore=\"random\">\n        Randomize\n        </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Table, Button, TagInput, Heading } from 'evergreen-ui'\n\nexport default function TopBar() {\n  return (\n    <div className=\"top__bar\">\n      <Heading size={800}>Random Team Mates Generator</Heading>\n      <Heading size={400}>By LT. Future</Heading>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Table, Button, TagInput, Heading, Theme } from 'evergreen-ui'\n\nexport default function Team(props) {\n  return (\n    <div className=\"team\">\n      <Table>\n        <Table.Head>\n          <Table.TextHeaderCell text=\"selected\">\n            {props.teamName}\n          </Table.TextHeaderCell>\n        </Table.Head>\n        <Table.Body height={240}>\n          {props.players?.map((name, id) => (\n            <Table.Row key={id} isSelectable onSelect={() => alert(name)} >\n              <Table.TextCell>{name}</Table.TextCell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n","function shuffle(array) {\n  var m = array.length, t, i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\nexport default shuffle","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.sass';\nimport { Button } from 'evergreen-ui'\nimport PlayersInput from './components/PlayersInput'\nimport TopBar from './layouts/TopBar';\nimport Team from './components/Team'\nimport shuffle from './utils/shuffle'\n\nfunction App() {\n\n  const [players, setPlayers] = useState([])\n  const [teamMembers, setTeamMembers] = useState([])\n  const teams = [\n    \"Team Potato\",\n    \"Team Pumpkin\",\n    \"Team Tingmo\",\n    \"Team Lemon\",\n    \"Team Apple\",\n    \"Team Banana\"\n  ]\n  const [totalTeams, setTotalTeams] = useState(2)\n\n  const playersOnChange = (values) => {\n    setPlayers([...values])\n  }\n\n  const totalTeamChange = (e) => {\n    setTotalTeams(parseInt(e.target.value))\n  }\n\n\n  // useEffect(() => {\n  //   let randomizeTeam = () => {\n  //     let allPlayers = shuffle([...players])\n  //     let teams = []\n  //     let oneTeam = []\n  //     let step = Math.round(allPlayers.length / parseInt(totalTeams))\n\n  //     for (let i = 0; i < totalTeams; i++) {\n  //       for (let n = i * step; n < ((step) + (step * i)); n++) {\n  //         oneTeam.push(allPlayers[n])\n  //       }\n  //       teams.push(oneTeam)\n  //       oneTeam = []\n  //     }\n  //     setTeamMembers(teams)\n  //   }\n  //   randomizeTeam()\n  // }, [totalTeams, players])\n\n  let randomizeTeam = () => {\n    let allPlayers = shuffle([...players])\n    let teams = []\n    let oneTeam = []\n    let step = Math.round(allPlayers.length / parseInt(totalTeams))\n\n    for (let i = 0; i < totalTeams; i++) {\n      for (let n = i * step; n < ((step) + (step * i)); n++) {\n        oneTeam.push(allPlayers[n])\n      }\n      teams.push(oneTeam)\n      oneTeam = []\n    }\n    setTeamMembers(teams)\n  }\n\n\n  let handleRandom = e => {\n    randomizeTeam()\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <TopBar />\n      <PlayersInput onClick={handleRandom} players={[...players]} onChange={playersOnChange} onChangeTotalTeam={totalTeamChange} />\n      <div className=\"teams\">\n        {Array.from(Array(totalTeams)).map((team, id) =>\n          <Team key={id} teamName={teams[id]} players={teamMembers[id]} />\n        )}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}